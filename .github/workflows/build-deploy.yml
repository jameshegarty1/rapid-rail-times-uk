name: Build and Deploy

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g. 0.1.6)'
        required: false
        type: string
  push:
    branches:
      - master

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USER }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_PAT }}
  LDB_TOKEN: ${{ secrets.LDB_TOKEN }}
  WSDL: ${{ secrets.WSDL }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Set version
        id: set_version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # Generate version based on date and commit hash
            VERSION="$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
            echo "VERSION=${VERSION}" >> $GITHUB_ENV
            echo "version=${VERSION}" >> $GITHUB_OUTPUT 
          fi

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          platforms: linux/amd64
          no-cache: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/${{ secrets.FRONTEND_REPO_NAME }}:v${{ env.VERSION }}
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL }}
      
      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          platforms: linux/amd64
          tags: ${{ env.DOCKERHUB_USERNAME }}/${{ secrets.BACKEND_REPO_NAME }}:v${{ env.VERSION }}
          build-args: |
            LDB_TOKEN=${{ env.LDB_TOKEN }}
            WSDL=${{ env.WSDL }}
        

  deploy-to-vm:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    env:
      VERSION: ${{ needs.build.outputs.version }}
    steps:
      - name: Deploy to Hetzner VM
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            cd /home/podman-user/rapid-rail-times-uk 
            git pull origin master

            cat > .env << EOF
            VERSION=v${{ secrets.VERSION }}
            DOCKERHUB_USER=${{ secrets.DOCKERHUB_USER }}
            FRONTEND_REPO_NAME=${{ secrets.FRONTEND_REPO_NAME }}
            BACKEND_REPO_NAME=${{ secrets.BACKEND_REPO_NAME }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            VITE_API_URL=${{ secrets.VITE_API_URL }}
            WSDL=${{ secrets.WSDL }}
            LDB_TOKEN=${{ secrets.LDB_TOKEN }}
            EOF

            chmod 600 .env
            ./deploy.sh 
