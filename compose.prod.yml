version: '3.7'

services:
  nginx:
    image: ${DOCKERHUB_USERNAME}/${FRONTEND_REPO_NAME}:${VERSION}
    ports:
      - 80:8080
      - 443:8080
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - rtuk-network
    environment:
      - VITE_API_URL=${VITE_API_URL}

  postgres:
    image: docker.io/postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 3
    volumes:
      - postgres-data:/var/lib/postgresql/data:cached
      - ./backups:/backups
    networks:
      - rtuk-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  backend:
    image: ${DOCKERHUB_USERNAME}/${BACKEND_REPO_NAME}:${VERSION}
    restart: unless-stopped
    environment:
      PYTHONPATH: .
      DATABASE_URL: 'postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}'
      WSDL: ${WSDL}
      LDB_TOKEN: ${LDB_TOKEN}
      ENVIRONMENT: production
      DEBUG: "false"
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - rtuk-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    # Remove development volumes - no live code reloading
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  rtuk-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
